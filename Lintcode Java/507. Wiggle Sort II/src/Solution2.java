import java.util.Arrays;

public class Solution2 {
    /*
     * @param nums: A list of integers
     * @return: nothing
     */
    public void wiggleSort(int[] nums) {
        // write your code here
        int len = nums.length;
        int mid = partition(nums, 0, len - 1, len >> 1);
        
        int[] tmp = new int[len];
        Arrays.fill(tmp, mid);
        
        int l = 1, r = (len % 2 == 0) ? len - 2 : len - 1;
        for (int i = 0; i < len; i++) {
            if (nums[i] > mid) {
                tmp[l] = nums[i];
                l += 2;
            } else if (nums[i] < mid) {
                tmp[r] = nums[i];
                r -= 2;
            }
        }
        
        for (int i = 0; i < len; i++) {
            nums[i] = tmp[i];
        }
    }
    
    private int partition(int[] nums, int l, int r, int rank) {
        int left = l, right = r;
        swap(nums, l, l + (r - l >> 1));
        int piv = nums[left];
        
        while (left < right) {
            while (left < right && nums[right] >= piv) {
                right--;
            }
            nums[left] = nums[right];
            while (left < right && nums[left] <= piv) {
                left++;
            }
            nums[right] = nums[left];
        }
        
        nums[left] = piv;
        if (left - l < rank) {
            return partition(nums, left + 1, r, rank - (left - l + 1));
        } else if (left - l > rank) {
            return partition(nums, l, right - 1, rank);
        } else {
            return piv;
        }
        
    }
    
    private void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
    
    public static void main(String[] args) {
        int[] nums = {1, 5, 1, 1, 6, 4};
        // int[] nums = {4, 5, 5, 6};
        // int[] nums = {3, 6, 6, 7, 2, 9, 10, 8, 8, 10, 3, 4, 7, 8, 9, 5, 6, 8, 8, 4, 7, 3, 7, 7, 5, 10, 4, 2, 8, 9, 5, 1, 8, 4, 8, 10, 6, 5, 5, 9, 6, 5, 2, 1, 4, 3, 9, 1, 3, 7, 6, 4, 4, 9, 1, 5, 3, 5, 1, 10, 1, 10, 10, 6, 5, 9, 10, 8, 1, 1, 10, 4, 1, 4, 4, 2, 7, 6, 2, 2, 1, 9, 7, 9, 9, 5, 5, 10, 2, 9, 3, 3, 9, 6, 2, 4, 6, 10, 1, 2, 6, 1, 2, 2, 7, 7, 1, 4, 7, 3, 4, 7, 1, 7, 7, 10, 9, 8, 3, 2, 5, 3, 6, 9, 9, 7, 4, 4, 4, 6, 7, 3, 9, 6, 2, 1, 9, 3, 3, 2, 1, 4, 8, 3, 5, 3, 4, 5, 2, 6, 6, 3, 9, 8, 8, 7, 4, 7, 5, 3, 6, 5, 1, 5, 10, 1, 1, 9, 10, 10, 9, 1, 2, 9, 5, 10, 4, 2, 5, 2, 4, 10, 6, 1, 4, 5, 1, 1, 2, 4, 2, 1, 6, 1, 10, 8, 9, 6, 8, 7, 6, 8, 7, 4, 6, 10, 2, 8, 5, 4, 4, 1, 2, 8, 9, 8, 4, 10, 8, 1, 3, 5, 1, 6, 7, 9, 8, 6, 4, 2, 3, 8, 4, 4, 8, 10, 7, 10, 8, 10, 8, 10, 7, 3, 6, 9, 9, 9, 10, 8, 3, 8, 1, 3, 5, 5, 8, 5, 5, 7, 6, 3, 1, 9, 9, 6, 3, 7, 1, 7, 4, 7, 2, 5, 10, 7, 8, 9, 8, 3, 5, 1, 2, 9, 8, 10, 5, 1, 3, 3, 2, 3, 2, 7, 3, 6, 7, 8, 5, 10, 6, 4, 8, 1, 4, 8, 8, 7, 10, 1, 5, 6, 10, 2, 7, 2, 5, 5, 9, 7, 1, 4, 6, 6, 6, 8, 7, 9, 7, 3, 1, 5, 7, 7, 5, 9, 7, 2, 3, 5, 5, 1, 2, 2, 2, 7, 2, 9, 10, 10, 3, 5, 5, 2, 3, 1, 2, 1, 10, 5, 4, 10, 7, 6, 7, 8, 10, 5, 1, 4, 9, 4, 7, 6, 7, 10, 5, 7, 6, 9, 5, 2, 10, 1, 9, 6, 6, 4, 10, 4, 8, 10, 6, 5, 6, 8, 10, 8, 4, 2, 8, 9, 6, 8, 8, 10, 4, 5, 3, 8, 1, 4, 3, 9, 2, 9, 2, 9, 9, 5, 2, 6, 10, 1, 4, 10, 6, 9, 10, 5, 10, 5, 8, 9, 10, 1, 7, 7, 8, 8, 1, 6, 1, 8, 4, 4, 2, 1, 1, 6, 5, 9, 3, 3, 8, 5, 1, 4, 3, 8, 9, 3, 10, 4, 6, 7, 6, 3, 2, 5, 3, 7, 6, 8, 2, 6, 10, 9, 9, 5, 3, 1, 4, 7, 7, 9, 8, 10, 7, 5, 7, 4, 1, 8, 7, 7, 6, 7, 7, 8, 5, 4, 2, 4, 3, 2, 6, 3, 6, 6, 1, 4, 6, 8, 7, 9, 6, 2, 1, 7, 9, 5, 1, 3, 5, 3, 8, 9, 2, 6, 5, 8, 1, 10, 4, 10, 3, 2, 4, 9, 8, 7, 1, 2, 6, 10, 1, 3, 3, 7, 9, 8, 2, 5, 1, 7, 1, 1, 6, 5, 9, 3, 5, 1, 6, 9, 8, 6, 10, 1, 2, 4, 10, 4, 3, 6, 9, 6, 4, 5, 8, 10, 7, 4, 3, 3, 7, 2, 1, 4, 2, 5, 6, 6, 9, 1, 2, 10, 9, 6, 5, 10, 4, 4, 9, 1, 9, 3, 2, 3, 6, 6, 4, 2, 7, 7, 4, 8, 7, 3, 2, 2, 7, 2, 2, 8, 10, 10, 8, 5, 8, 6, 7, 3, 8, 4, 1, 4, 8, 5, 5, 2, 4, 3, 3, 5, 7, 2, 3, 5, 9, 8, 2, 7, 1, 2, 7, 7, 6, 2, 6, 1, 5, 7, 2, 8, 6, 7, 4, 9, 9, 2, 6, 3, 8, 8, 1, 5, 4, 8, 2, 5, 10, 7, 3, 9, 5, 8, 10, 3, 10, 5, 6, 10, 9, 4, 1, 8, 7, 3, 8, 6, 8, 9, 8, 8, 6, 9, 8, 2, 10, 1, 6, 2, 1, 2, 6, 5, 10, 9, 2, 5, 5, 10, 10, 10, 7, 10, 5, 1, 1, 6, 10, 7, 7, 7, 4, 8, 6, 5, 10, 9, 8, 10, 9, 5, 8, 5, 5, 2, 6, 7, 1, 8, 8, 7, 5, 10, 9, 3, 8, 5, 6, 7, 7, 4, 10, 7, 7, 4, 10, 2, 6, 6, 2, 5, 7, 2, 4, 2, 6, 10, 4, 2, 2, 3, 2, 2, 2, 8, 8, 3, 1, 7, 6, 3, 6, 6, 3, 1, 10, 1, 8, 2, 9, 2, 7, 10, 5, 4, 10, 6, 10, 2, 2, 3, 6, 5, 3, 10, 8, 9, 6, 7, 3, 7, 1, 10, 5, 1, 4, 5, 5, 1, 4, 4, 3, 6, 10, 10, 10, 10, 4, 3, 9, 2, 9, 1, 8, 9, 4, 4, 1, 8, 5, 4, 2, 6, 7, 2, 8, 10, 10, 6, 7, 7, 9, 3, 4, 10, 1, 2, 1, 8, 9, 1, 1, 3, 5, 10, 8, 2, 9, 2, 6, 7, 4, 5, 3, 6, 9, 3, 9, 5, 1, 9, 9, 2, 7, 4, 2, 6, 5, 5, 3, 6, 4, 3, 5, 5, 8, 9, 6, 9, 10, 6, 4, 8, 6, 6, 1, 10, 9, 4, 7, 5, 8, 4, 1, 7, 10, 10, 1, 2, 9, 9, 2, 7, 9, 1, 1, 3, 3, 1, 1, 9, 9, 10, 5, 1, 7, 1, 6, 2, 9, 10, 1, 6, 6, 9, 7, 10, 7, 3, 8, 4, 4, 4, 7, 7, 2, 9, 7, 1, 4, 6, 5, 3, 6, 1, 7, 10, 6, 8, 9, 3, 9, 5, 2, 6, 6, 6, 10, 5, 9, 5, 7, 2, 1, 10, 6, 8, 7, 1, 2, 9, 2, 6, 2, 6, 8, 8, 2, 9, 4, 8, 3, 8, 7, 3, 6, 1, 1, 9, 2, 1, 4, 8, 9, 4, 7, 3, 8, 5, 8, 3, 10, 9, 1, 4, 10, 2, 3, 9, 8, 10, 10, 4, 10, 4, 2, 3, 1, 2, 4, 2, 9, 5, 5, 8, 6, 10, 8, 5, 2, 6, 2, 5, 7, 7, 4, 1, 4, 2, 7, 10, 8, 3, 1, 7, 9, 6, 6, 2, 5, 8, 9, 10, 3, 4, 2, 8, 4, 8, 3, 1, 6, 6, 5, 10, 5, 5, 2, 9, 1, 2, 6, 4, 9, 2, 10, 8, 5, 9, 5, 6, 2, 5, 3, 2, 6, 3, 6, 2, 8, 3, 6, 5, 7, 9, 1, 10, 3, 7, 1, 1, 10, 7, 4, 8, 1, 6, 8, 7, 5, 6, 3, 5, 1, 1, 1, 6, 2, 7, 5, 8, 2, 2, 9, 8, 10, 10, 6, 7, 1, 1, 4, 8, 5, 5, 10, 6, 6, 8, 5, 8, 3, 2, 10, 7, 10, 3, 5, 2, 5, 7, 10, 9, 6, 9, 6, 9, 10, 5, 1, 9, 5, 1, 6, 8, 9, 7, 10, 8, 10, 4, 10, 9, 4, 2, 9, 3, 3, 10, 7, 3, 3, 3, 8, 6, 10, 3, 8, 2, 1, 9, 2, 7, 2, 7, 4, 5, 1, 2, 8, 6, 3, 1, 8, 7, 5, 2, 10, 6, 7, 10, 8, 6, 6, 9, 7, 1, 2, 9, 2, 8, 6, 5, 2, 6, 10, 7, 3, 10, 8, 7, 8, 5, 8, 1, 5, 9, 8, 7, 10, 2, 8, 6, 10, 4, 2, 2, 7, 8, 7, 1, 3, 9, 10, 4, 6, 10, 9, 7, 5, 10, 10, 1, 4, 10, 1, 6, 3, 8, 6, 1, 6, 9, 9, 9, 6, 9, 3, 10, 7, 1, 4, 8, 4, 9, 3, 1, 4, 6, 10, 10, 7, 1, 3, 5, 6, 7, 1, 5, 3, 8, 6, 1, 1, 6, 2, 1, 5, 1, 7, 6, 10, 5, 5, 6, 10, 6, 6, 9, 8, 8, 1, 4, 5, 6, 3, 4, 7, 8, 6, 8, 1, 9, 4, 5, 5, 3, 3, 5, 3, 1, 2, 10, 6, 7, 2, 9, 8, 8, 6, 9, 7, 8, 2, 2, 3, 5, 4, 9, 9, 8, 10, 8, 4, 5, 7, 2, 5, 4, 1, 9, 7, 2, 2, 9, 4, 3, 3, 3, 8, 5, 1, 8, 7, 1, 8, 5, 7, 7, 4, 5, 6, 5, 9, 5, 5, 4, 8, 8, 1, 10, 2, 4, 4, 2, 10, 7, 1, 8, 4, 10, 7, 4, 2, 3, 4, 10, 9, 3, 1, 9, 3, 1, 2, 7, 9, 3, 4, 2, 3, 1, 2, 8, 2, 6, 5, 4, 10, 7, 3, 2, 10, 8, 6, 2, 2, 3, 6, 5, 3, 1, 4, 7, 4, 8, 3, 1, 9, 2, 6, 2, 5, 8, 3, 4, 5, 8, 1, 4, 6, 6, 5, 9, 3, 1, 6, 1, 10, 9, 9, 2, 10, 6, 10, 6, 1, 6, 2, 4, 6, 6, 4, 6, 3, 5, 10, 2, 9, 6, 5, 8, 7, 9, 5, 8, 9, 3, 4, 2, 2, 5, 2, 4, 1, 10, 10, 2, 4, 2, 1, 10, 6, 7, 7, 3, 10, 10, 2, 5, 1, 6, 8, 6, 10, 9, 4, 7, 5, 4, 4, 10, 8, 6, 5, 3, 6, 3, 5, 7, 8, 2, 10, 3, 1, 1, 2, 10, 6, 4, 4, 8, 6, 6, 2, 8, 2, 5, 4, 5, 3, 8, 3, 4, 6, 8, 7, 5, 7, 5, 5, 4, 8, 1, 7, 2, 7, 3, 2, 1, 10, 2, 10, 9, 10, 10, 10, 8, 5, 10, 3, 10, 8, 7, 4, 1, 5, 6, 9, 7, 5, 6, 3, 6, 3, 5, 2, 10, 4, 1, 2, 7, 9, 4, 10, 4, 7, 8, 1, 2, 6, 7, 10, 10, 8, 5, 8, 4, 1, 4, 8, 6, 6, 2, 5, 9, 8, 1, 6, 3, 5, 6, 6, 9, 9, 2, 2, 10, 1, 10, 9, 4, 8, 9, 3, 6, 1, 1, 10, 2, 4, 7, 5, 6, 3, 7, 6, 6, 9, 8, 3, 5, 1, 6, 9, 5, 3, 1, 10, 5, 10, 8, 3, 2, 7, 1, 4, 4, 1, 9, 4, 7, 9, 4, 2, 5, 10, 5, 8, 10, 6, 9, 1, 3, 10, 3, 8, 3, 1, 7, 9, 5, 7, 2, 1, 5, 4, 6, 7, 7, 4, 4, 3, 1, 9, 6, 6, 1, 9, 6, 3, 5, 2, 4, 4, 5, 3, 8, 9, 2, 2, 2, 3, 7, 8, 1, 8, 1, 10, 8, 6, 10, 9, 2, 10, 2, 9, 2, 5, 5, 6, 9, 4, 7, 8, 5, 10, 7, 3, 7, 7, 6, 1, 1, 6, 3, 1, 7, 10, 5, 4, 2, 9, 7, 9, 10, 2, 4, 10, 7, 5, 8, 7, 7, 3, 3, 1, 3, 8, 10, 9, 1, 8, 4, 7, 4, 6, 9, 1, 9, 5, 2, 10, 10, 3, 8, 4, 8, 4, 9, 6, 4, 3, 10, 7, 8, 10, 2, 8, 1, 1, 7, 9, 5, 8, 3, 5, 10, 8, 1, 4, 1, 8, 6, 6, 5, 4, 3, 2, 8, 5, 10, 5, 8, 3, 3, 9, 7, 2, 5, 5, 3, 7, 6, 1, 1, 10, 9, 3, 7, 10, 3, 5, 8, 1, 9, 1, 1, 3, 1, 9, 6, 8, 6, 2, 10, 6, 8, 7, 10, 8, 8, 3, 7, 2, 1, 7, 3, 5, 3, 10, 10, 10, 1, 2, 2, 9, 2, 8, 7, 7, 1, 5, 2, 1, 5, 6, 5, 7, 6, 10, 1, 4, 9, 6, 8, 8, 6, 2, 7, 5, 1, 6, 9, 6, 8, 9, 8, 2, 4, 10, 8, 5, 3, 1, 8, 1, 9, 10, 8, 4, 5, 1, 2, 2, 9, 1, 7, 2, 6, 10, 1, 6, 2, 2, 9, 2, 2, 2, 3, 4, 7, 6, 7, 7, 7};
        // int[] tmp = nums.clone();
        // System.out.println(new Solution2().partition(nums, 0, nums.length - 1, nums.length - 1 >> 1));
        // Arrays.sort(tmp);
        // System.out.println(Arrays.toString(tmp));
        // System.out.println(Arrays.toString(nums));
        
        
        new Solution2().wiggleSort(nums);
        for (int i = 0; i < nums.length - 1; i++) {
            if (i % 2 == 0) {
                if (nums[i] >= nums[i + 1]) {
                    System.out.println(i);
                    break;
                }
            } else {
                if (nums[i] <= nums[i + 1]) {
                    System.out.println(i);
                    break;
                }
            }
        }
        
        System.out.println(Arrays.toString(nums));
    }
}
