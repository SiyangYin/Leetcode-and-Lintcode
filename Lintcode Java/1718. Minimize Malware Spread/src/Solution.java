import java.util.Arrays;

public class Solution {
    /**
     * @param graph:   the node graph
     * @param initial: the infected node
     * @return: the node index
     */
    public int minMalwareSpread(int[][] graph, int[] initial) {
        // write your code here.
        int n = graph.length;
        
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        int color = 0;
        for (int i = 0; i < n; i++) {
            if (colors[i] == -1) {
                dfs(i, color++, colors, graph);
            }
        }
        
        int[] size = new int[color];
        for (int i : colors) {
            size[i]++;
        }
        
        int[] malCount = new int[color];
        for (int i : initial) {
            malCount[colors[i]]++;
        }
        
        int res = -1, maxSaved = 0;
        for (int v : initial) {
            if (malCount[colors[v]] != 1) {
                continue;
            }
            
            if (size[colors[v]] > maxSaved) {
                maxSaved =size[colors[v]];
                res = v;
            } else if (size[colors[v]] == maxSaved) {
                res = Math.min(res, v);
            }
        }
        
        if (res == -1) {
            res = n;
            for (int i : initial) {
                res = Math.min(res, i);
            }
        }
        
        return res;
    }
    
    private void dfs(int v, int color, int[] colors, int[][] graph) {
        colors[v] = color;
        for (int next = 0; next < graph[v].length; next++) {
            if (graph[v][next] == 1 && colors[next] == -1) {
                dfs(next, color, colors, graph);
            }
        }
    }
    
    public static void main(String[] args) {
        int[][] g = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
        int[] i = {1, 2};
        System.out.println(new Solution().minMalwareSpread(g, i));
    }
}
