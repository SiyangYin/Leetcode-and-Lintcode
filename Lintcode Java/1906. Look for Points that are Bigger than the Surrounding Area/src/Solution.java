import java.util.Arrays;

public class Solution {
    /**
     * @param grid: a matrix
     * @return: Find all points that are strictly larger than their neighbors
     */
    public int[][] highpoints(int[][] grid) {
        // write your code here
        int m = grid.length, n = grid[0].length;
        int[][] res = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                
                boolean lower = false;
                for (int k = -1; k <= 1; k++) {
                    for (int l = -1; l <= 1; l++) {
                        if (k == 0 && l == 0) {
                            continue;
                        }
                        if (k == -1 && l == 1) {
                            continue;
                        }
                        
                        int ni = i + k, nj = j + l;
                        if (inBound(ni, nj, grid)) {
                            if (grid[ni][nj] >= grid[i][j]) {
                                res[i][j] = 0;
                                lower = true;
                                break;
                            }
                        }
                    }
                    if (lower) {
                        break;
                    }
                }
                
                if (!lower) {
                    res[i][j] = 1;
                }
            }
        }
        
        return res;
    }
    
    private boolean inBound(int x, int y, int[][] grid) {
        return 0 <= x && x < grid.length && 0 <= y && y < grid[0].length;
    }
    
    // public static void main(String[] args) {
    //     int[][] h = {
    //             {51, 5, 69, 20, 87, 82, 89, 44, 45, 63, 97, 31, 88, 61, 11, 31, 10, 51, 47, 1, 20, 64, 47, 69, 95, 97, 85, 49, 73, 34, 1, 72, 94, 36, 91, 0, 19, 86, 34, 9, 64, 92, 90, 44, 89, 71, 88, 45, 51, 38, 43, 68, 36, 64, 0, 26, 33, 35, 25, 66, 62, 84, 67, 53, 63, 48, 79, 36, 49, 43, 74, 63, 14, 79, 87, 43, 9, 60, 13, 20, 82, 69, 80, 47, 38, 61, 13, 55, 5, 63, 69, 48, 59, 90, 45, 53, 81, 37, 48, 15},
    //             {0, 7, 13, 46, 63, 82, 44, 87, 98, 5, 82, 66, 37, 58, 83, 56, 93, 84, 92, 57, 81, 74, 69, 68, 73, 24, 16, 83, 68, 31, 99, 53, 50, 44, 30, 45, 76, 91, 73, 28, 86, 2, 96, 66, 53, 51, 32, 13, 51, 45, 21, 71, 92, 60, 96, 93, 27, 74, 72, 3, 44, 30, 91, 98, 18, 15, 14, 56, 19, 40, 77, 47, 91, 34, 67, 16, 35, 65, 66, 57, 75, 12, 93, 17, 2, 20, 19, 19, 24, 84, 72, 14, 93, 2, 77, 55, 76, 27, 24, 23},
    //             {90, 91, 16, 55, 40, 71, 42, 25, 49, 24, 81, 97, 77, 73, 36, 95, 43, 56, 57, 71, 54, 81, 88, 94, 99, 54, 96, 27, 80, 46, 29, 67, 83, 12, 43, 56, 44, 35, 14, 12, 97, 48, 99, 60, 85, 31, 57, 46, 75, 70, 27, 32, 52, 50, 33, 38, 14, 27, 81, 75, 98, 22, 5, 51, 64, 13, 34, 15, 33, 35, 47, 73, 10, 1, 93, 10, 43, 83, 1, 93, 94, 3, 65, 82, 70, 91, 91, 15, 86, 1, 88, 58, 14, 56, 99, 87, 24, 32, 52, 27},
    //             {82, 67, 80, 21, 87, 78, 34, 99, 79, 42, 87, 69, 29, 31, 66, 30, 76, 28, 53, 39, 27, 24, 28, 96, 64, 72, 4, 63, 90, 51, 90, 80, 51, 46, 57, 39, 26, 12, 44, 48, 34, 37, 44, 16, 70, 69, 46, 10, 86, 68, 20, 69, 21, 48, 74, 33, 64, 46, 15, 80, 88, 48, 59, 90, 80, 74, 67, 59, 22, 39, 75, 64, 98, 23, 4, 24, 42, 99, 82, 89, 0, 41, 99, 77, 45, 92, 85, 82, 79, 6, 37, 81, 45, 76, 0, 38, 93, 37, 38, 93},
    //             {3, 35, 32, 55, 44, 39, 10, 93, 6, 7, 10, 92, 98, 25, 3, 44, 9, 17, 14, 10, 23, 35, 49, 91, 81, 22, 5, 27, 94, 12, 1, 62, 65, 40, 79, 22, 29, 76, 11, 1, 48, 82, 49, 5, 12, 25, 56, 33, 27, 15, 68, 17, 94, 2, 4, 41, 20, 44, 61, 62, 7, 27, 1, 97, 32, 33, 35, 28, 55, 79, 62, 6, 26, 52, 84, 11, 86, 93, 17, 80, 37, 18, 16, 96, 2, 95, 93, 11, 50, 36, 44, 69, 69, 94, 85, 79, 32, 63, 81, 62}};
    //
    //     System.out.println(h[3][23]);
    //
    //     int[][] hh = new Solution2().highpoints(h);
    //     for (int i = 0; i < hh.length; i++) {
    //         System.out.println(Arrays.toString(hh[i]));
    //     }
    // }
}
