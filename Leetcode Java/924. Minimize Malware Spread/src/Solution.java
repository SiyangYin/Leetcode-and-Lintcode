import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Solution {
    
    class UnionFind {
        int[] parent, size;
        
        public UnionFind(int size) {
            parent = new int[size];
            for (int i = 0; i < size; i++) {
                parent[i] = i;
            }
            
            this.size = new int[size];
            Arrays.fill(this.size, 1);
        }
        
        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            
            return parent[x];
        }
        
        public void union(int x, int y) {
            int px = find(x), py = find(y);
            if (px == py) {
                return;
            }
            
            parent[px] = py;
            size[py] += size[px];
        }
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind(n);
        
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        for (int x : initial) {
            int px = uf.find(x);
            map.put(px, map.getOrDefault(px, 0) + 1);
        }
        
        int maxN = 0, res = -1;
        for (int x : initial) {
            int px = uf.find(x);
            if (map.get(px) == 1) {
                if (uf.size[px] > maxN) {
                    maxN = uf.size[px];
                    res = x;
                } else if (uf.size[px] == maxN) {
                    res = Math.min(res, x);
                }
            }
        }
        
        if (res == -1) {
            res = n;
            for (int x : initial) {
                res = Math.min(res, x);
            }
        }
        
        return res;
    }
}
