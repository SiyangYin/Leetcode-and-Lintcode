import java.util.*;

public class Solution {
    
    class UnionFind {
        int[] parent, size;
        
        public UnionFind(int size) {
            parent = new int[size];
            for (int i = 0; i < size; i++) {
                parent[i] = i;
            }
            this.size = new int[size];
            Arrays.fill(this.size, 1);
        }
        
        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }
        
        public void union(int x, int y) {
            int px = find(x), py = find(y);
            if (px == py) {
                return;
            }
            
            parent[px] = py;
            size[py] += size[px];
        }
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        boolean[] dirty = new boolean[n];
        for (int x : initial) {
            dirty[x] = true;
        }
        
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            if (!dirty[i]) {
                for (int j = i + 1; j < n; j++) {
                    if (!dirty[j] && graph[i][j] == 1) {
                        uf.union(i, j);
                    }
                }
            }
        }
        
        Map<Integer, List<Integer>> infectorMap = new HashMap<>();
        for (int x : initial) {
            for (int y = 0; y < graph[x].length; y++) {
                if (!dirty[y] && graph[x][y] == 1) {
                    int py = uf.find(y);
                    infectorMap.putIfAbsent(py, new ArrayList<>());
                    infectorMap.get(py).add(x);
                }
            }
        }
        
        Map<Integer, Integer> saveCount = new HashMap<>();
        for (Map.Entry<Integer, List<Integer>> entry : infectorMap.entrySet()) {
            int parent = entry.getKey();
            List<Integer> infectors = entry.getValue();
            if (infectors.size() > 1) {
                continue;
            }
            
            int infector = infectors.iterator().next();
            saveCount.put(infector, saveCount.getOrDefault(infector, 0) + uf.size[parent]);
        }
        
        if (saveCount.isEmpty()) {
            int res = n;
            for (int i : initial) {
                res = Math.min(res, i);
            }
            
            return res;
        }
        
        int res = -1, maxSave = 0;
        for (Map.Entry<Integer, Integer> entry : saveCount.entrySet()) {
            int infector = entry.getKey(), saved = entry.getValue();
            if (saved > maxSave) {
                maxSave = saved;
                res = infector;
            } else if (saved == maxSave) {
                res = Math.min(res, infector);
            }
        }
        
        return res;
    }
}
